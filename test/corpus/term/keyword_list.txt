# simple literal

[a: 1, a_b@12?: 2, A_B@12!: 3, Mod: 4, __struct__: 5]

==>

Source(
  List(
    Keywords(
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer))))

# trailing separator

[a: 1,]

==>

Source(
  List(
    Keywords(
      Pair(
        Keyword,
        Integer))))

# with leading items

[1, {:c, 1}, a: 1, b: 2]

==>

Source(
  List(
    Integer,
    Tuple(
      Atom,
      Integer),
    Keywords(
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer))))

# operator key

[~~~: 1, ==: 2, >: 3]

==>

Source(
  List(
    Keywords(
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer))))

# special atom key

[...: 1, %{}: 2, {}: 3, %: 4, <<>>: 5, ..//: 6]

==>

Source(
  List(
    Keywords(
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer))))

# reserved token key

[not: 1, and: 2]
[nil: 1, true: 2]

==>

Source(
  List(
    Keywords(
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer))),
  List(
    Keywords(
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer))))

# quoted key

[
  "key1 ?? !! ' \n": 1,
  'key2 ?? !! " \n': 2
]

==>

Source(
  List(
    Keywords(
      Pair(
        QuotedKeyword(
          QuotedContent,
          EscapeSequence),
        Integer),
      Pair(
        QuotedKeyword(
          QuotedContent,
          EscapeSequence),
        Integer))))

# key interpolation

[
  "hey #{name}!": 1,
  'hey #{name}!': 2
]

==>

Source(
  List(
    Keywords(
      Pair(
        QuotedKeyword(
          QuotedContent,
          Interpolation(
            Identifier),
          QuotedContent),
        Integer),
      Pair(
        QuotedKeyword(
          QuotedContent,
          Interpolation(
            Identifier),
          QuotedContent),
        Integer))))

# [error] with trailing items

[a: 1, b: 2, 1 => 1]

==>

Source(
  List(
    Keywords(
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword,
        Integer),
      Pair(
        Keyword(âš ),
        BinaryOperator(
          Integer,
          Operator,
          Integer)))))
